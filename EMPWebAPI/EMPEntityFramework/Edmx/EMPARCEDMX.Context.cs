//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMPEntityFramework.Edmx
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EMPDB_ARCEntities : DbContext
    {
        public EMPDB_ARCEntities()
            : base("name=EMPDB_ARCEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AccessTypeMaster> AccessTypeMasters { get; set; }
        public virtual DbSet<AffiliateProgramMaster> AffiliateProgramMasters { get; set; }
        public virtual DbSet<AffiliationProgramEntityMap> AffiliationProgramEntityMaps { get; set; }
        public virtual DbSet<APIIntegration> APIIntegrations { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<AuditLog_EFIN> AuditLog_EFIN { get; set; }
        public virtual DbSet<AuditLog_EnrollmentReset> AuditLog_EnrollmentReset { get; set; }
        public virtual DbSet<AudtiLog_DefaultBank> AudtiLog_DefaultBank { get; set; }
        public virtual DbSet<BankAssociatedCutofDate> BankAssociatedCutofDates { get; set; }
        public virtual DbSet<BankEnrollment> BankEnrollments { get; set; }
        public virtual DbSet<BankEnrollmentEFINOwnersForRA> BankEnrollmentEFINOwnersForRAs { get; set; }
        public virtual DbSet<BankEnrollmentForRA> BankEnrollmentForRAs { get; set; }
        public virtual DbSet<BankEnrollmentForRB> BankEnrollmentForRBs { get; set; }
        public virtual DbSet<BankEnrollmentForTPG> BankEnrollmentForTPGs { get; set; }
        public virtual DbSet<BankEnrollmentHistory> BankEnrollmentHistories { get; set; }
        public virtual DbSet<BankEnrollmentInvalid> BankEnrollmentInvalids { get; set; }
        public virtual DbSet<BankEnrollmentStatu> BankEnrollmentStatus { get; set; }
        public virtual DbSet<BankEntityMap> BankEntityMaps { get; set; }
        public virtual DbSet<BankMaster> BankMasters { get; set; }
        public virtual DbSet<BankSubQuestion> BankSubQuestions { get; set; }
        public virtual DbSet<ContactPersonTitleCustomerMap> ContactPersonTitleCustomerMaps { get; set; }
        public virtual DbSet<ContactPersonTitleMaster> ContactPersonTitleMasters { get; set; }
        public virtual DbSet<CustomerAssociatedFee> CustomerAssociatedFees { get; set; }
        public virtual DbSet<CustomerConfigurationStatu> CustomerConfigurationStatus { get; set; }
        public virtual DbSet<CustomerMaster> CustomerMasters { get; set; }
        public virtual DbSet<CustomerNote> CustomerNotes { get; set; }
        public virtual DbSet<CustomerPaymentOption> CustomerPaymentOptions { get; set; }
        public virtual DbSet<CustomerPaymentViaACH> CustomerPaymentViaACHes { get; set; }
        public virtual DbSet<CustomerPaymentViaCreditCard> CustomerPaymentViaCreditCards { get; set; }
        public virtual DbSet<CustomerUnlock> CustomerUnlocks { get; set; }
        public virtual DbSet<DocumentMaster> DocumentMasters { get; set; }
        public virtual DbSet<EmailNotification> EmailNotifications { get; set; }
        public virtual DbSet<EMP_ActionMaser> EMP_ActionMaser { get; set; }
        public virtual DbSet<emp_CustomerInformation> emp_CustomerInformation { get; set; }
        public virtual DbSet<emp_CustomerLoginInformation> emp_CustomerLoginInformation { get; set; }
        public virtual DbSet<EnrollmentAddonStaging> EnrollmentAddonStagings { get; set; }
        public virtual DbSet<EnrollmentAffiliateConfiguration> EnrollmentAffiliateConfigurations { get; set; }
        public virtual DbSet<EnrollmentBankSelection> EnrollmentBankSelections { get; set; }
        public virtual DbSet<EnrollmentFeeReimbursementConfig> EnrollmentFeeReimbursementConfigs { get; set; }
        public virtual DbSet<EnrollmentOfficeConfiguration> EnrollmentOfficeConfigurations { get; set; }
        public virtual DbSet<EntityActionPermission> EntityActionPermissions { get; set; }
        public virtual DbSet<EntityHierarchy> EntityHierarchies { get; set; }
        public virtual DbSet<EntityMaster> EntityMasters { get; set; }
        public virtual DbSet<Error> Errors { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public virtual DbSet<FeeEntityMap> FeeEntityMaps { get; set; }
        public virtual DbSet<FeeMaster> FeeMasters { get; set; }
        public virtual DbSet<FeeReimbursementConfig> FeeReimbursementConfigs { get; set; }
        public virtual DbSet<GroupMaster> GroupMasters { get; set; }
        public virtual DbSet<GroupRoleMap> GroupRoleMaps { get; set; }
        public virtual DbSet<MainOfficeConfiguration> MainOfficeConfigurations { get; set; }
        public virtual DbSet<NotificationMaster> NotificationMasters { get; set; }
        public virtual DbSet<OfficeManagement> OfficeManagements { get; set; }
        public virtual DbSet<PermissionMaster> PermissionMasters { get; set; }
        public virtual DbSet<PhoneTypeCustomerMap> PhoneTypeCustomerMaps { get; set; }
        public virtual DbSet<PhoneTypeMaster> PhoneTypeMasters { get; set; }
        public virtual DbSet<RoleMaster> RoleMasters { get; set; }
        public virtual DbSet<RolePermissionMap> RolePermissionMaps { get; set; }
        public virtual DbSet<Salesforce_Account> Salesforce_Account { get; set; }
        public virtual DbSet<Salesforce_Contact> Salesforce_Contact { get; set; }
        public virtual DbSet<Salesforce_Opportunity> Salesforce_Opportunity { get; set; }
        public virtual DbSet<SalesYearEntityMap> SalesYearEntityMaps { get; set; }
        public virtual DbSet<SalesYearMaster> SalesYearMasters { get; set; }
        public virtual DbSet<SecurityAnswerUserMap> SecurityAnswerUserMaps { get; set; }
        public virtual DbSet<SecurityQuestionMaster> SecurityQuestionMasters { get; set; }
        public virtual DbSet<SitemapEntity> SitemapEntities { get; set; }
        public virtual DbSet<SitemapMaster> SitemapMasters { get; set; }
        public virtual DbSet<SitemapPermissionMap> SitemapPermissionMaps { get; set; }
        public virtual DbSet<SiteMapRolePermission> SiteMapRolePermissions { get; set; }
        public virtual DbSet<StateMaster> StateMasters { get; set; }
        public virtual DbSet<StatusCode> StatusCodes { get; set; }
        public virtual DbSet<SubSiteAffiliateProgramConfig> SubSiteAffiliateProgramConfigs { get; set; }
        public virtual DbSet<SubSiteBankConfig> SubSiteBankConfigs { get; set; }
        public virtual DbSet<SubSiteBankFeesConfig> SubSiteBankFeesConfigs { get; set; }
        public virtual DbSet<SubSiteConfiguration> SubSiteConfigurations { get; set; }
        public virtual DbSet<SubSiteFeeConfig> SubSiteFeeConfigs { get; set; }
        public virtual DbSet<SubSiteOfficeBankFeeConfig> SubSiteOfficeBankFeeConfigs { get; set; }
        public virtual DbSet<SubSiteOfficeConfig> SubSiteOfficeConfigs { get; set; }
        public virtual DbSet<TokenMaster> TokenMasters { get; set; }
        public virtual DbSet<TooltipMaster> TooltipMasters { get; set; }
        public virtual DbSet<UpdateBankEnrollmentStatus_AuditLog> UpdateBankEnrollmentStatus_AuditLog { get; set; }
        public virtual DbSet<UserGroupMap> UserGroupMaps { get; set; }
        public virtual DbSet<UserMaster> UserMasters { get; set; }
        public virtual DbSet<UserNotificationsMap> UserNotificationsMaps { get; set; }
        public virtual DbSet<UserRolesMap> UserRolesMaps { get; set; }
        public virtual DbSet<UtaxCrosslinkDetail> UtaxCrosslinkDetails { get; set; }
        public virtual DbSet<ZipCodeMaster> ZipCodeMasters { get; set; }
    
        public virtual int ArchiveData_InsertSP(Nullable<System.Guid> userId, Nullable<int> entityType, Nullable<System.Guid> salesYear, Nullable<System.Guid> token)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var entityTypeParameter = entityType.HasValue ?
                new ObjectParameter("EntityType", entityType) :
                new ObjectParameter("EntityType", typeof(int));
    
            var salesYearParameter = salesYear.HasValue ?
                new ObjectParameter("SalesYear", salesYear) :
                new ObjectParameter("SalesYear", typeof(System.Guid));
    
            var tokenParameter = token.HasValue ?
                new ObjectParameter("Token", token) :
                new ObjectParameter("Token", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ArchiveData_InsertSP", userIdParameter, entityTypeParameter, salesYearParameter, tokenParameter);
        }
    
        public virtual ObjectResult<NewCustomerSignupGrid_SP_Result> NewCustomerSignupGrid_SP(Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NewCustomerSignupGrid_SP_Result>("NewCustomerSignupGrid_SP", pageIndexParameter, pageSizeParameter);
        }
    
        public virtual ObjectResult<OfficeManagementGridFilter_Result> OfficeManagementGridFilter(string stautusFilter, string siteTypeFilter, string enrollmentStatusFilter, string bankPartnerFilter, string onboardingStatusFilter, Nullable<int> userType, string xCustomerId)
        {
            var stautusFilterParameter = stautusFilter != null ?
                new ObjectParameter("StautusFilter", stautusFilter) :
                new ObjectParameter("StautusFilter", typeof(string));
    
            var siteTypeFilterParameter = siteTypeFilter != null ?
                new ObjectParameter("SiteTypeFilter", siteTypeFilter) :
                new ObjectParameter("SiteTypeFilter", typeof(string));
    
            var enrollmentStatusFilterParameter = enrollmentStatusFilter != null ?
                new ObjectParameter("EnrollmentStatusFilter", enrollmentStatusFilter) :
                new ObjectParameter("EnrollmentStatusFilter", typeof(string));
    
            var bankPartnerFilterParameter = bankPartnerFilter != null ?
                new ObjectParameter("BankPartnerFilter", bankPartnerFilter) :
                new ObjectParameter("BankPartnerFilter", typeof(string));
    
            var onboardingStatusFilterParameter = onboardingStatusFilter != null ?
                new ObjectParameter("OnboardingStatusFilter", onboardingStatusFilter) :
                new ObjectParameter("OnboardingStatusFilter", typeof(string));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var xCustomerIdParameter = xCustomerId != null ?
                new ObjectParameter("xCustomerId", xCustomerId) :
                new ObjectParameter("xCustomerId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OfficeManagementGridFilter_Result>("OfficeManagementGridFilter", stautusFilterParameter, siteTypeFilterParameter, enrollmentStatusFilterParameter, bankPartnerFilterParameter, onboardingStatusFilterParameter, userTypeParameter, xCustomerIdParameter);
        }
    
        public virtual ObjectResult<OfficeManagementGridRecord_Result> OfficeManagementGridRecord(Nullable<int> userType, string xCustomerId, Nullable<int> xStart, Nullable<int> xMaxSize)
        {
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var xCustomerIdParameter = xCustomerId != null ?
                new ObjectParameter("xCustomerId", xCustomerId) :
                new ObjectParameter("xCustomerId", typeof(string));
    
            var xStartParameter = xStart.HasValue ?
                new ObjectParameter("xStart", xStart) :
                new ObjectParameter("xStart", typeof(int));
    
            var xMaxSizeParameter = xMaxSize.HasValue ?
                new ObjectParameter("xMaxSize", xMaxSize) :
                new ObjectParameter("xMaxSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OfficeManagementGridRecord_Result>("OfficeManagementGridRecord", userTypeParameter, xCustomerIdParameter, xStartParameter, xMaxSizeParameter);
        }
    
        public virtual ObjectResult<OfficeManagementGridSearch_Result> OfficeManagementGridSearch(Nullable<int> searchTypeId, string searchText, Nullable<int> userType, string xCustomerId, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var searchTypeIdParameter = searchTypeId.HasValue ?
                new ObjectParameter("SearchTypeId", searchTypeId) :
                new ObjectParameter("SearchTypeId", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var xCustomerIdParameter = xCustomerId != null ?
                new ObjectParameter("xCustomerId", xCustomerId) :
                new ObjectParameter("xCustomerId", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OfficeManagementGridSearch_Result>("OfficeManagementGridSearch", searchTypeIdParameter, searchTextParameter, userTypeParameter, xCustomerIdParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int OfficeManagementGridSP(string xCustomerId, string xSalesYear, string xRootParentId)
        {
            var xCustomerIdParameter = xCustomerId != null ?
                new ObjectParameter("xCustomerId", xCustomerId) :
                new ObjectParameter("xCustomerId", typeof(string));
    
            var xSalesYearParameter = xSalesYear != null ?
                new ObjectParameter("xSalesYear", xSalesYear) :
                new ObjectParameter("xSalesYear", typeof(string));
    
            var xRootParentIdParameter = xRootParentId != null ?
                new ObjectParameter("xRootParentId", xRootParentId) :
                new ObjectParameter("xRootParentId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("OfficeManagementGridSP", xCustomerIdParameter, xSalesYearParameter, xRootParentIdParameter);
        }
    
        public virtual int SetDefaultBankSP(string xCustomerId, string xUserId, string xBankId)
        {
            var xCustomerIdParameter = xCustomerId != null ?
                new ObjectParameter("xCustomerId", xCustomerId) :
                new ObjectParameter("xCustomerId", typeof(string));
    
            var xUserIdParameter = xUserId != null ?
                new ObjectParameter("xUserId", xUserId) :
                new ObjectParameter("xUserId", typeof(string));
    
            var xBankIdParameter = xBankId != null ?
                new ObjectParameter("xBankId", xBankId) :
                new ObjectParameter("xBankId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetDefaultBankSP", xCustomerIdParameter, xUserIdParameter, xBankIdParameter);
        }
    
        public virtual int SF_SOSOME_Update(string xCustomerId, string xUserId, Nullable<bool> eFINListedOtherOffice, Nullable<bool> siteOwnthisEFIN, Nullable<bool> subSiteSendTaxReturn)
        {
            var xCustomerIdParameter = xCustomerId != null ?
                new ObjectParameter("xCustomerId", xCustomerId) :
                new ObjectParameter("xCustomerId", typeof(string));
    
            var xUserIdParameter = xUserId != null ?
                new ObjectParameter("xUserId", xUserId) :
                new ObjectParameter("xUserId", typeof(string));
    
            var eFINListedOtherOfficeParameter = eFINListedOtherOffice.HasValue ?
                new ObjectParameter("EFINListedOtherOffice", eFINListedOtherOffice) :
                new ObjectParameter("EFINListedOtherOffice", typeof(bool));
    
            var siteOwnthisEFINParameter = siteOwnthisEFIN.HasValue ?
                new ObjectParameter("SiteOwnthisEFIN", siteOwnthisEFIN) :
                new ObjectParameter("SiteOwnthisEFIN", typeof(bool));
    
            var subSiteSendTaxReturnParameter = subSiteSendTaxReturn.HasValue ?
                new ObjectParameter("SubSiteSendTaxReturn", subSiteSendTaxReturn) :
                new ObjectParameter("SubSiteSendTaxReturn", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SF_SOSOME_Update", xCustomerIdParameter, xUserIdParameter, eFINListedOtherOfficeParameter, siteOwnthisEFINParameter, subSiteSendTaxReturnParameter);
        }
    
        [DbFunction("EMPDB_ARCEntities", "SplitString")]
        public virtual IQueryable<string> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[EMPDB_ARCEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual int UpdateBankEnrollStatusAfterApprove(string xCustomerId, string xUserId)
        {
            var xCustomerIdParameter = xCustomerId != null ?
                new ObjectParameter("xCustomerId", xCustomerId) :
                new ObjectParameter("xCustomerId", typeof(string));
    
            var xUserIdParameter = xUserId != null ?
                new ObjectParameter("xUserId", xUserId) :
                new ObjectParameter("xUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateBankEnrollStatusAfterApprove", xCustomerIdParameter, xUserIdParameter);
        }
    
        public virtual int UpdateEFINAfterApprove(string xCustomerId, string xUserId, Nullable<int> oldEFIN)
        {
            var xCustomerIdParameter = xCustomerId != null ?
                new ObjectParameter("xCustomerId", xCustomerId) :
                new ObjectParameter("xCustomerId", typeof(string));
    
            var xUserIdParameter = xUserId != null ?
                new ObjectParameter("xUserId", xUserId) :
                new ObjectParameter("xUserId", typeof(string));
    
            var oldEFINParameter = oldEFIN.HasValue ?
                new ObjectParameter("OldEFIN", oldEFIN) :
                new ObjectParameter("OldEFIN", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEFINAfterApprove", xCustomerIdParameter, xUserIdParameter, oldEFINParameter);
        }
    
        public virtual int UpdateFeeAfterApprove(string xCustomerId, string xUserId)
        {
            var xCustomerIdParameter = xCustomerId != null ?
                new ObjectParameter("xCustomerId", xCustomerId) :
                new ObjectParameter("xCustomerId", typeof(string));
    
            var xUserIdParameter = xUserId != null ?
                new ObjectParameter("xUserId", xUserId) :
                new ObjectParameter("xUserId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateFeeAfterApprove", xCustomerIdParameter, xUserIdParameter);
        }
    }
}
